{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/xampp/htdocs/next-project-EKIRE/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"üîê Received credentials:\", credentials);\r\n\r\n        // Validate credentials\r\n        if (!credentials?.email || !credentials?.password) {\r\n          console.error(\"‚ùå Missing email or password.\");\r\n          return null;\r\n        }\r\n\r\n        const apiUrl = `${process.env.NEXT_PUBLIC_BACKEND_API_URL}/auth/login`;\r\n        console.log(\"üåê Sending login request to:\", apiUrl);\r\n\r\n        try {\r\n          const res = await fetch(apiUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              // Note: X-CSRF-TOKEN likely not needed for server-to-server\r\n            },\r\n            body: JSON.stringify({\r\n              email: credentials.email,\r\n              password: credentials.password,\r\n            }),\r\n          });\r\n\r\n          console.log(\"üì° Login response status:\", res.status);\r\n\r\n          let data;\r\n          try {\r\n            data = await res.json();\r\n          } catch (jsonError) {\r\n            console.error(\"‚ùå Failed to parse JSON from response:\", jsonError);\r\n            return null;\r\n          }\r\n\r\n          console.log(\"üì¶ Response data:\", data);\r\n\r\n          if (res.ok && data?.success) {\r\n            return {\r\n              id: data.data.user.id, // or any unique field like user ID\r\n              name: `${data.data.user.firstName} ${data.data.user.lastName}`,\r\n              email: data.data.user.email,\r\n              accessToken: data.data.accessToken,\r\n            };\r\n          } else {\r\n            console.warn(\"‚ö†Ô∏è Login failed with message:\", data?.message || \"Unknown error\");\r\n            return null;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"‚ùå Login request failed:\", error);\r\n          return null;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        console.log(\"üîë JWT callback - user:\", user);\r\n        token.accessToken = user.accessToken;\r\n        token.id = user.id;\r\n        token.email = user.email;\r\n        token.name = user.name;\r\n      }\r\n      return token;\r\n    },\r\n\r\n    async session({ session, token }) {\r\n      session.user.id = token.id;\r\n      session.user.accessToken = token.accessToken;\r\n      session.user.email = token.email;\r\n      session.user.name = token.name;\r\n      console.log(\"üì¶ Session callback - session:\", session);\r\n      return session;\r\n    },\r\n  },\r\n  debug: true, // üîç Enable NextAuth debug logs\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,4BAA4B;gBAExC,uBAAuB;gBACvB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,OAAO;gBACT;gBAEA,MAAM,SAAS,oEAA2C,WAAW,CAAC;gBACtE,QAAQ,GAAG,CAAC,gCAAgC;gBAE5C,IAAI;oBACF,MAAM,MAAM,MAAM,MAAM,QAAQ;wBAC9B,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAElB;wBACA,MAAM,KAAK,SAAS,CAAC;4BACnB,OAAO,YAAY,KAAK;4BACxB,UAAU,YAAY,QAAQ;wBAChC;oBACF;oBAEA,QAAQ,GAAG,CAAC,6BAA6B,IAAI,MAAM;oBAEnD,IAAI;oBACJ,IAAI;wBACF,OAAO,MAAM,IAAI,IAAI;oBACvB,EAAE,OAAO,WAAW;wBAClB,QAAQ,KAAK,CAAC,yCAAyC;wBACvD,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,qBAAqB;oBAEjC,IAAI,IAAI,EAAE,IAAI,MAAM,SAAS;wBAC3B,OAAO;4BACL,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;4BACrB,MAAM,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;4BAC9D,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK;4BAC3B,aAAa,KAAK,IAAI,CAAC,WAAW;wBACpC;oBACF,OAAO;wBACL,QAAQ,IAAI,CAAC,iCAAiC,MAAM,WAAW;wBAC/D,OAAO;oBACT;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,2BAA2B;oBACzC,OAAO;gBACT;YACF;QACF;KACD;IAED,SAAS;QACP,UAAU;IACZ;IAEA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,2BAA2B;gBACvC,MAAM,WAAW,GAAG,KAAK,WAAW;gBACpC,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1B,QAAQ,IAAI,CAAC,WAAW,GAAG,MAAM,WAAW;YAC5C,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAC9B,QAAQ,GAAG,CAAC,kCAAkC;YAC9C,OAAO;QACT;IACF;IACA,OAAO;AACT","debugId":null}}]
}